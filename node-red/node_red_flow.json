[
    {
        "id": "8474e62a35d9fe8b",
        "type": "function",
        "z": "9c76d92f709fa434",
        "name": "Combine Sensor Data",
        "func": "// Initialize context if not exists\nif (!context.sensorData) {\n    context.sensorData = {\n        temp: [],\n        hum: [],\n        time: [],\n        lastTemp: null,\n        lastHum: null,\n        lastPrediction: null\n    };\n}\n\n// Update the appropriate value based on topic\nif (msg.topic === \"esp32/temperature\") {\n    context.sensorData.lastTemp = parseFloat(msg.payload);\n} else if (msg.topic === \"esp32/humidity\") {\n    context.sensorData.lastHum = parseFloat(msg.payload);\n} else if (msg.topic === \"esp32/prediction\") {\n    try {\n        // Force conversion to string for any object type\n        if (typeof msg.payload === \"object\" && msg.payload !== null) {\n            // Check if prediction property exists\n            if (msg.payload.hasOwnProperty('prediction')) {\n                // Extract only the prediction value\n                context.sensorData.lastPrediction = msg.payload.prediction.toString();\n            } else {\n                // If no prediction property, convert whole object to readable string\n                context.sensorData.lastPrediction = JSON.stringify(msg.payload, null, 2);\n            }\n        } \n        // Handle string payloads that might be JSON\n        else if (typeof msg.payload === \"string\") {\n            try {\n                // Try to parse as JSON\n                const parsedPayload = JSON.parse(msg.payload);\n                if (parsedPayload.hasOwnProperty('prediction')) {\n                    context.sensorData.lastPrediction = parsedPayload.prediction.toString();\n                } else {\n                    context.sensorData.lastPrediction = JSON.stringify(parsedPayload, null, 2);\n                }\n            } catch (e) {\n                // If not valid JSON, use as is\n                context.sensorData.lastPrediction = msg.payload;\n            }\n        }\n        // Handle all other types\n        else {\n            context.sensorData.lastPrediction = msg.payload !== null ? msg.payload.toString() : \"No prediction\";\n        }\n    } catch (e) {\n        // Fallback for any error\n        context.sensorData.lastPrediction = \"Error: \" + e.message;\n    }\n}\n\n// Only proceed if we have temp, hum, and prediction\nif (\n    context.sensorData.lastTemp !== null &&\n    context.sensorData.lastHum !== null &&\n    context.sensorData.lastPrediction !== null\n) {\n    // Add new data (limit to 50 points)\n    context.sensorData.temp.push(context.sensorData.lastTemp);\n    context.sensorData.hum.push(context.sensorData.lastHum);\n    context.sensorData.time.push(new Date().toLocaleTimeString());\n\n    if (context.sensorData.temp.length > 50) {\n        context.sensorData.temp.shift();\n        context.sensorData.hum.shift();\n        context.sensorData.time.shift();\n    }\n\n    // Prepare output for charts\n    var newMsg = {\n        payload: {\n            temperature: context.sensorData.lastTemp,\n            humidity: context.sensorData.lastHum,\n            prediction: context.sensorData.lastPrediction,\n            chartData: {\n                labels: context.sensorData.time,\n                datasets: [\n                    {\n                        label: \"Temperature (Â°C)\",\n                        data: context.sensorData.temp,\n                        borderColor: \"#FF6384\",\n                        backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n                        yAxisID: 'y'\n                    },\n                    {\n                        label: \"Humidity (%)\",\n                        data: context.sensorData.hum,\n                        borderColor: \"#36A2EB\",\n                        backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n                        yAxisID: 'y1'\n                    }\n                ]\n            }\n        }\n    };\n\n    return [{ payload: context.sensorData.lastPrediction }, { payload: context.sensorData.lastTemp },{ payload: context.sensorData.lastHum },newMsg];\n}\n\nreturn null;\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 130,
        "wires": [
            [
                "9ad9b2f41b1d4ad2"
            ],
            [
                "d01d74cd39521eef",
                "e00df2adabcbde13"
            ],
            [
                "ce7eaad5d82ec434",
                "a8d37c87910cface"
            ]
        ]
    }
]